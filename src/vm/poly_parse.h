#ifndef SRC_VM_POLY_PARSE_H_
#define SRC_VM_POLY_PARSE_H_

#include "poly_lex.h"

typedef enum
{
	TOKEN_OPENRNDBRCKT,
	TOKEN_CLOSERNDBRCKT,
	TOKEN_OPENCRLYBRCKT,
	TOKEN_CLOSECRLYBRCKT,
	TOKEN_OPENSQRBRCKT,
	TOKEN_CLOSESQRBRCKT,
	TOKEN_EQ,
	TOKEN_LT,
	TOKEN_GT,
	TOKEN_UNEQ,
	TOKEN_EQEQ,
	TOKEN_LTEQ,
	TOKEN_GTEQ,
	TOKEN_NMBRSGN,
	TOKEN_ATSGN,
	TOKEN_PRCNTSGN,
	TOKEN_QSTNMRK,
	TOKEN_EXCLMTNMRK,
	TOKEN_SINGLEQTMRK,
	TOKEN_DOUBLEQTMRK,
	TOKEN_CLN,
	TOKEN_CLNCLN,
	TOKEN_DOT,
	TOKEN_DOTDOT,
	TOKEN_DOTDOTDOT,
	TOKEN_COMMA,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_ASTERISK,
	TOKEN_SLASH,
	TOKEN_CARET,
	TOKEN_BACKSLASH,

	TOKEN_AND,
	TOKEN_BREAK,
	TOKEN_CONTINUE,
	TOKEN_DO,
	TOKEN_ELSE,
	TOKEN_END,
	TOKEN_FALSE,
	TOKEN_FOR,
	TOKEN_FUNCTION,
	TOKEN_IF,
	TOKEN_NOT,
	TOKEN_NULL,
	TOKEN_OR,
	TOKEN_REPEAT,
	TOKEN_RETURN,
	TOKEN_TRUE,
	TOKEN_UNTIL,
	TOKEN_WHILE,

	TOKEN_IDENTIFIER,
	TOKEN_NUMBER,

	TOKEN_NEWLINE,
	TOKEN_INDENT,

	TOKEN_UNKNOWN,
	TOKEN_EOF
} TokenType;

typedef struct
{
	TokenType type;
	const char *start;
	int len;
	Value value;
} Token;

typedef struct
{
	Lexer lexer;
	Token *tokenstream;
	const Token *curtoken;
	unsigned int allocatedmemory;
	unsigned int maxmemory;
	unsigned int totaltoken;
} Parser;

#endif
