#ifndef POLY_LEX_H
#define POLY_LEX_H

#include "poly_value.h"

typedef enum
{
	TOKEN_OPENRNDBRCKT,
	TOKEN_CLOSERNDBRCKT,
	TOKEN_OPENCRLYBRCKT,
	TOKEN_CLOSECRLYBRCKT,
	TOKEN_OPENSQRBRCKT,
	TOKEN_CLOSESQRBRCKT,
	TOKEN_EQ,
	TOKEN_LT,
	TOKEN_GT,
	TOKEN_UNEQ,
	TOKEN_EQEQ,
	TOKEN_LTEQ,
	TOKEN_GTEQ,
	TOKEN_NMBRSGN,
	TOKEN_ATSGN,
	TOKEN_PRCNTSGN,
	TOKEN_QSTNMRK,
	TOKEN_EXCLMTNMRK,
	TOKEN_SINGLEQTMRK,
	TOKEN_DOUBLEQTMRK,
	TOKEN_CLN,
	TOKEN_CLNCLN,
	TOKEN_DOT,
	TOKEN_DOTDOT,
	TOKEN_DOTDOTDOT,
	TOKEN_COMMA,
	TOKEN_PLUS,
	TOKEN_MINUS,
	TOKEN_ASTERISK,
	TOKEN_SLASH,
	TOKEN_CARET,
	TOKEN_BACKSLASH,

	TOKEN_AND,
	TOKEN_CASE,
	TOKEN_CLASS,
	TOKEN_CONSTRUCTOR,
	TOKEN_CONTINUE,
	TOKEN_ELSE,
	TOKEN_END,
	TOKEN_EXTEND,
	TOKEN_EXTERN,
	TOKEN_FALSE,
	TOKEN_FUNCTION,
	TOKEN_GET,
	TOKEN_IF,
	TOKEN_INTERN,
	TOKEN_NAMESPACE,
	TOKEN_NOT,
	TOKEN_NULL,
	TOKEN_OR,
	TOKEN_PROPERTY,
	TOKEN_RETURN,
	TOKEN_SET,
	TOKEN_SUPER,
	TOKEN_TRUE,
	TOKEN_WHEN,
	TOKEN_WHILE,

	TOKEN_IDENTIFIER,
	TOKEN_NUMBER,

	TOKEN_NEWLINE,
	TOKEN_INDENT,

	TOKEN_UNKNOWN,
	TOKEN_EOF
} TokenType;

typedef struct
{
	TokenType type;
	const char *start;
	int len;
	Value value;
} Token;

typedef struct
{
	const char *source;
	const char *curchar;
	const char *tokenstart;
} Lexer;

#endif
